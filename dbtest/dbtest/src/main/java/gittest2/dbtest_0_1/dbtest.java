// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gittest2.dbtest_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: dbtest Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.0.20160510_1709
 * @status 
 */
public class dbtest implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "dbtest";
	private final String projectName = "GITTEST2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					dbtest.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(dbtest.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMysqlInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class citywithcountryStruct implements
			routines.system.IPersistableRow<citywithcountryStruct> {
		final static byte[] commonByteArrayLock_GITTEST2_dbtest = new byte[0];
		static byte[] commonByteArray_GITTEST2_dbtest = new byte[0];

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Object Continent;

		public Object getContinent() {
			return this.Continent;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_GITTEST2_dbtest.length) {
					if (length < 1024
							&& commonByteArray_GITTEST2_dbtest.length == 0) {
						commonByteArray_GITTEST2_dbtest = new byte[1024];
					} else {
						commonByteArray_GITTEST2_dbtest = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_GITTEST2_dbtest, 0, length);
				strReturn = new String(commonByteArray_GITTEST2_dbtest, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_GITTEST2_dbtest) {

				try {

					int length = 0;

					this.Name = readString(dis);

					this.Continent = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Name, dos);

				// Object

				dos.writeObject(this.Continent);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Name=" + Name);
			sb.append(",Continent=" + String.valueOf(Continent));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(citywithcountryStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_GITTEST2_dbtest = new byte[0];
		static byte[] commonByteArray_GITTEST2_dbtest = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String District;

		public String getDistrict() {
			return this.District;
		}

		public int Population;

		public int getPopulation() {
			return this.Population;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_GITTEST2_dbtest.length) {
					if (length < 1024
							&& commonByteArray_GITTEST2_dbtest.length == 0) {
						commonByteArray_GITTEST2_dbtest = new byte[1024];
					} else {
						commonByteArray_GITTEST2_dbtest = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_GITTEST2_dbtest, 0, length);
				strReturn = new String(commonByteArray_GITTEST2_dbtest, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_GITTEST2_dbtest) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.Name = readString(dis);

					this.CountryCode = readString(dis);

					this.District = readString(dis);

					this.Population = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.District, dos);

				// int

				dos.writeInt(this.Population);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",District=" + District);
			sb.append(",Population=" + String.valueOf(Population));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tMysqlInput_1Struct implements
			routines.system.IPersistableRow<after_tMysqlInput_1Struct> {
		final static byte[] commonByteArrayLock_GITTEST2_dbtest = new byte[0];
		static byte[] commonByteArray_GITTEST2_dbtest = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String District;

		public String getDistrict() {
			return this.District;
		}

		public int Population;

		public int getPopulation() {
			return this.Population;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_GITTEST2_dbtest.length) {
					if (length < 1024
							&& commonByteArray_GITTEST2_dbtest.length == 0) {
						commonByteArray_GITTEST2_dbtest = new byte[1024];
					} else {
						commonByteArray_GITTEST2_dbtest = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_GITTEST2_dbtest, 0, length);
				strReturn = new String(commonByteArray_GITTEST2_dbtest, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_GITTEST2_dbtest) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.Name = readString(dis);

					this.CountryCode = readString(dis);

					this.District = readString(dis);

					this.Population = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.District, dos);

				// int

				dos.writeInt(this.Population);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Name=" + Name);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",District=" + District);
			sb.append(",Population=" + String.valueOf(Population));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tMysqlInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tMysqlInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				citywithcountryStruct citywithcountry = new citywithcountryStruct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				citywithcountryStruct citywithcountry_tmp = new citywithcountryStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_1);
				String dbUser_tMysqlInput_1 = "root";

				final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("9cda4db47f927686f2755a2552bd3c8cf059967a8bff95b8");

				String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;

				String url_tMysqlInput_1 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "world" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_1, dbUser_tMysqlInput_1,
						dbPwd_tMysqlInput_1);

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "SELECT \n  `city`.`ID`, \n  `city`.`Name`, \n  `city`.`CountryCode`, \n  `city`.`District`, \n  `city`.`Population`\nFROM `city` limit 100";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);

				java.sql.ResultSet rs_tMysqlInput_1 = null;
				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1
							.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
							.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
							.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						if (colQtyInRs_tMysqlInput_1 < 1) {
							row1.ID = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(1) != null) {
								row1.ID = rs_tMysqlInput_1.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 2) {
							row1.Name = null;
						} else {

							row1.Name = routines.system.JDBCUtil.getString(
									rs_tMysqlInput_1, 2, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 3) {
							row1.CountryCode = null;
						} else {

							row1.CountryCode = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_1, 3, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 4) {
							row1.District = null;
						} else {

							row1.District = routines.system.JDBCUtil.getString(
									rs_tMysqlInput_1, 4, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 5) {
							row1.Population = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(5) != null) {
								row1.Population = rs_tMysqlInput_1.getInt(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */

						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.Code = row1.CountryCode;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

							if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.Code = '"
							// + row2HashKey.Code + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							citywithcountry = null;

							if (!rejectedInnerJoin_tMap_1) {

								// # Output table : 'citywithcountry'
								citywithcountry_tmp.Name = row1.Name;
								citywithcountry_tmp.Continent = row2.Continent;
								citywithcountry = citywithcountry_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "citywithcountry"
						if (citywithcountry != null) {

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							// /////////////////////

							strBuffer_tLogRow_1 = new StringBuilder();

							if (citywithcountry.Name != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(citywithcountry.Name));

							} //

							strBuffer_tLogRow_1.append("|");

							if (citywithcountry.Continent != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(citywithcountry.Continent));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_1 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_1);
							}
							consoleOut_tLogRow_1.println(strBuffer_tLogRow_1
									.toString());
							consoleOut_tLogRow_1.flush();
							nb_line_tLogRow_1++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

						} // End of branch "citywithcountry"

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					if (rs_tMysqlInput_1 != null) {
						rs_tMysqlInput_1.close();
					}
					stmt_tMysqlInput_1.close();
					if (conn_tMysqlInput_1 != null
							&& !conn_tMysqlInput_1.isClosed()) {

						conn_tMysqlInput_1.close();

					}

				}

				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_GITTEST2_dbtest = new byte[0];
		static byte[] commonByteArray_GITTEST2_dbtest = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Code;

		public String getCode() {
			return this.Code;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Object Continent;

		public Object getContinent() {
			return this.Continent;
		}

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		public float SurfaceArea;

		public float getSurfaceArea() {
			return this.SurfaceArea;
		}

		public Short IndepYear;

		public Short getIndepYear() {
			return this.IndepYear;
		}

		public int Population;

		public int getPopulation() {
			return this.Population;
		}

		public Float LifeExpectancy;

		public Float getLifeExpectancy() {
			return this.LifeExpectancy;
		}

		public Float GNP;

		public Float getGNP() {
			return this.GNP;
		}

		public Float GNPOld;

		public Float getGNPOld() {
			return this.GNPOld;
		}

		public String LocalName;

		public String getLocalName() {
			return this.LocalName;
		}

		public String GovernmentForm;

		public String getGovernmentForm() {
			return this.GovernmentForm;
		}

		public String HeadOfState;

		public String getHeadOfState() {
			return this.HeadOfState;
		}

		public Integer Capital;

		public Integer getCapital() {
			return this.Capital;
		}

		public String Code2;

		public String getCode2() {
			return this.Code2;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Code == null) ? 0 : this.Code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.Code == null) {
				if (other.Code != null)
					return false;

			} else if (!this.Code.equals(other.Code))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.Code = this.Code;
			other.Name = this.Name;
			other.Continent = this.Continent;
			other.Region = this.Region;
			other.SurfaceArea = this.SurfaceArea;
			other.IndepYear = this.IndepYear;
			other.Population = this.Population;
			other.LifeExpectancy = this.LifeExpectancy;
			other.GNP = this.GNP;
			other.GNPOld = this.GNPOld;
			other.LocalName = this.LocalName;
			other.GovernmentForm = this.GovernmentForm;
			other.HeadOfState = this.HeadOfState;
			other.Capital = this.Capital;
			other.Code2 = this.Code2;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.Code = this.Code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_GITTEST2_dbtest.length) {
					if (length < 1024
							&& commonByteArray_GITTEST2_dbtest.length == 0) {
						commonByteArray_GITTEST2_dbtest = new byte[1024];
					} else {
						commonByteArray_GITTEST2_dbtest = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_GITTEST2_dbtest, 0, length);
				strReturn = new String(commonByteArray_GITTEST2_dbtest, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_GITTEST2_dbtest) {

				try {

					int length = 0;

					this.Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.Continent = (Object) ois.readObject();

				this.Region = readString(dis, ois);

				this.SurfaceArea = dis.readFloat();

				length = dis.readByte();
				if (length == -1) {
					this.IndepYear = null;
				} else {
					this.IndepYear = dis.readShort();
				}

				this.Population = dis.readInt();

				length = dis.readByte();
				if (length == -1) {
					this.LifeExpectancy = null;
				} else {
					this.LifeExpectancy = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.GNP = null;
				} else {
					this.GNP = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.GNPOld = null;
				} else {
					this.GNPOld = dis.readFloat();
				}

				this.LocalName = readString(dis, ois);

				this.GovernmentForm = readString(dis, ois);

				this.HeadOfState = readString(dis, ois);

				this.Capital = readInteger(dis, ois);

				this.Code2 = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				oos.writeObject(this.Continent);

				writeString(this.Region, dos, oos);

				dos.writeFloat(this.SurfaceArea);

				if (this.IndepYear == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.IndepYear);
				}

				dos.writeInt(this.Population);

				if (this.LifeExpectancy == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LifeExpectancy);
				}

				if (this.GNP == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.GNP);
				}

				if (this.GNPOld == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.GNPOld);
				}

				writeString(this.LocalName, dos, oos);

				writeString(this.GovernmentForm, dos, oos);

				writeString(this.HeadOfState, dos, oos);

				writeInteger(this.Capital, dos, oos);

				writeString(this.Code2, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Code=" + Code);
			sb.append(",Name=" + Name);
			sb.append(",Continent=" + String.valueOf(Continent));
			sb.append(",Region=" + Region);
			sb.append(",SurfaceArea=" + String.valueOf(SurfaceArea));
			sb.append(",IndepYear=" + String.valueOf(IndepYear));
			sb.append(",Population=" + String.valueOf(Population));
			sb.append(",LifeExpectancy=" + String.valueOf(LifeExpectancy));
			sb.append(",GNP=" + String.valueOf(GNP));
			sb.append(",GNPOld=" + String.valueOf(GNPOld));
			sb.append(",LocalName=" + LocalName);
			sb.append(",GovernmentForm=" + GovernmentForm);
			sb.append(",HeadOfState=" + HeadOfState);
			sb.append(",Capital=" + String.valueOf(Capital));
			sb.append(",Code2=" + Code2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Code, other.Code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tMysqlInput_2 - inputs:(after_tMysqlInput_1)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2)
				// outputs:(citywithcountry)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tMysqlInput_2 begin ] start
				 */

				ok_Hash.put("tMysqlInput_2", false);
				start_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				currentComponent = "tMysqlInput_2";

				int tos_count_tMysqlInput_2 = 0;

				java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2
						.getTime();
				int nb_line_tMysqlInput_2 = 0;
				java.sql.Connection conn_tMysqlInput_2 = null;
				String driverClass_tMysqlInput_2 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_2);
				String dbUser_tMysqlInput_2 = "root";

				final String decryptedPassword_tMysqlInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("9cda4db47f927686f2755a2552bd3c8cf059967a8bff95b8");

				String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;

				String url_tMysqlInput_2 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "world" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_2, dbUser_tMysqlInput_2,
						dbPwd_tMysqlInput_2);

				java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2
						.createStatement();

				String dbquery_tMysqlInput_2 = "SELECT \n  `country`.`Code`, \n  `country`.`Name`, \n  `country`.`Continent`, \n  `country`.`Region`, \n  `country`.`SurfaceArea`, \n  `country`.`IndepYear`, \n  `country`.`Population`, \n  `country`.`LifeExpectancy`, \n  `country`.`GNP`, \n  `country`.`GNPOld`, \n  `country`.`LocalName`, \n  `country`.`GovernmentForm`, \n  `country`.`HeadOfState`, \n  `country`.`Capital`, \n  `country`.`Code2`\nFROM `country`";

				globalMap.put("tMysqlInput_2_QUERY", dbquery_tMysqlInput_2);

				java.sql.ResultSet rs_tMysqlInput_2 = null;
				try {
					rs_tMysqlInput_2 = stmt_tMysqlInput_2
							.executeQuery(dbquery_tMysqlInput_2);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2
							.getMetaData();
					int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2
							.getColumnCount();

					String tmpContent_tMysqlInput_2 = null;

					while (rs_tMysqlInput_2.next()) {
						nb_line_tMysqlInput_2++;

						if (colQtyInRs_tMysqlInput_2 < 1) {
							row2.Code = null;
						} else {

							row2.Code = routines.system.JDBCUtil.getString(
									rs_tMysqlInput_2, 1, false);
						}
						if (colQtyInRs_tMysqlInput_2 < 2) {
							row2.Name = null;
						} else {

							row2.Name = routines.system.JDBCUtil.getString(
									rs_tMysqlInput_2, 2, false);
						}
						if (colQtyInRs_tMysqlInput_2 < 3) {
							row2.Continent = null;
						} else {

							if (rs_tMysqlInput_2.getObject(3) != null) {
								row2.Continent = rs_tMysqlInput_2.getObject(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 4) {
							row2.Region = null;
						} else {

							row2.Region = routines.system.JDBCUtil.getString(
									rs_tMysqlInput_2, 4, false);
						}
						if (colQtyInRs_tMysqlInput_2 < 5) {
							row2.SurfaceArea = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(5) != null) {
								row2.SurfaceArea = rs_tMysqlInput_2.getFloat(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 6) {
							row2.IndepYear = null;
						} else {

							if (rs_tMysqlInput_2.getObject(6) != null) {
								row2.IndepYear = rs_tMysqlInput_2.getShort(6);
							} else {
								row2.IndepYear = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 7) {
							row2.Population = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(7) != null) {
								row2.Population = rs_tMysqlInput_2.getInt(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 8) {
							row2.LifeExpectancy = null;
						} else {

							if (rs_tMysqlInput_2.getObject(8) != null) {
								row2.LifeExpectancy = rs_tMysqlInput_2
										.getFloat(8);
							} else {
								row2.LifeExpectancy = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 9) {
							row2.GNP = null;
						} else {

							if (rs_tMysqlInput_2.getObject(9) != null) {
								row2.GNP = rs_tMysqlInput_2.getFloat(9);
							} else {
								row2.GNP = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 10) {
							row2.GNPOld = null;
						} else {

							if (rs_tMysqlInput_2.getObject(10) != null) {
								row2.GNPOld = rs_tMysqlInput_2.getFloat(10);
							} else {
								row2.GNPOld = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 11) {
							row2.LocalName = null;
						} else {

							row2.LocalName = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_2, 11, false);
						}
						if (colQtyInRs_tMysqlInput_2 < 12) {
							row2.GovernmentForm = null;
						} else {

							row2.GovernmentForm = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_2, 12, false);
						}
						if (colQtyInRs_tMysqlInput_2 < 13) {
							row2.HeadOfState = null;
						} else {

							row2.HeadOfState = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_2, 13, false);
						}
						if (colQtyInRs_tMysqlInput_2 < 14) {
							row2.Capital = null;
						} else {

							if (rs_tMysqlInput_2.getObject(14) != null) {
								row2.Capital = rs_tMysqlInput_2.getInt(14);
							} else {
								row2.Capital = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 15) {
							row2.Code2 = null;
						} else {

							row2.Code2 = routines.system.JDBCUtil.getString(
									rs_tMysqlInput_2, 15, false);
						}

						/**
						 * [tMysqlInput_2 begin ] stop
						 */

						/**
						 * [tMysqlInput_2 main ] start
						 */

						currentComponent = "tMysqlInput_2";

						tos_count_tMysqlInput_2++;

						/**
						 * [tMysqlInput_2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.Code = row2.Code;

						row2_HashRow.Name = row2.Name;

						row2_HashRow.Continent = row2.Continent;

						row2_HashRow.Region = row2.Region;

						row2_HashRow.SurfaceArea = row2.SurfaceArea;

						row2_HashRow.IndepYear = row2.IndepYear;

						row2_HashRow.Population = row2.Population;

						row2_HashRow.LifeExpectancy = row2.LifeExpectancy;

						row2_HashRow.GNP = row2.GNP;

						row2_HashRow.GNPOld = row2.GNPOld;

						row2_HashRow.LocalName = row2.LocalName;

						row2_HashRow.GovernmentForm = row2.GovernmentForm;

						row2_HashRow.HeadOfState = row2.HeadOfState;

						row2_HashRow.Capital = row2.Capital;

						row2_HashRow.Code2 = row2.Code2;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tMysqlInput_2 end ] start
						 */

						currentComponent = "tMysqlInput_2";

					}
				} finally {
					if (rs_tMysqlInput_2 != null) {
						rs_tMysqlInput_2.close();
					}
					stmt_tMysqlInput_2.close();
					if (conn_tMysqlInput_2 != null
							&& !conn_tMysqlInput_2.isClosed()) {

						conn_tMysqlInput_2.close();

					}

				}

				globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

				ok_Hash.put("tMysqlInput_2", true);
				end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				/**
				 * [tMysqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_2 finally ] start
				 */

				currentComponent = "tMysqlInput_2";

				/**
				 * [tMysqlInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final dbtest dbtestClass = new dbtest();

		int exitCode = dbtestClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = dbtest.class.getClassLoader()
					.getResourceAsStream(
							"gittest2/dbtest_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMysqlInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlInput_1) {
			globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", -1);

			e_tMysqlInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : dbtest");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 69457 characters generated by Talend Open Studio for ESB on the 29 June 2016
 * 12:21:39 BST
 ************************************************************************************************/
